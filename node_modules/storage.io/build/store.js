'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _util = require('./util');

var _storage = require('./storage');

var _storage2 = _interopRequireDefault(_storage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Store = function () {
  function Store() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Store);

    this.name = (opts.name || (0, _util.random)()) + '-store';
    this.type = opts.type === 'session' ? 'session' : 'local';
    this.storage = new _storage2.default(this.type);

    var store = this.storage.get(this.name);
    if ((typeof store === 'undefined' ? 'undefined' : _typeof(store)) !== 'object') {
      console.warn('reset storage key: %s', this.name);
      this.storage.set(this.name, {});
    }
  }

  _createClass(Store, [{
    key: 'set',
    value: function set(key, value) {
      var store = this.storage.get(this.name);

      store[key] = value;

      this.storage.set(this.name, store);
    }
  }, {
    key: 'get',
    value: function get(key) {
      var store = this.all();

      return store[key];
    }
  }, {
    key: 'all',
    value: function all() {
      return this.storage.get(this.name) || {};
    }
  }, {
    key: 'keys',
    value: function keys() {
      return Object.keys(this.all());
    }
  }, {
    key: 'entities',
    value: function entities() {
      var store = this.all();

      return Object.keys(store).map(function (key) {
        return store[key];
      });
    }
  }, {
    key: 'size',
    value: function size() {
      return this.keys().length;
    }
  }, {
    key: 'remove',
    value: function remove(key) {
      var store = this.all();

      if (store.hasOwnProperty(key)) {
        var value = store[key];
        delete store[key];

        this.storage.set(this.name, store);

        return value;
      }
    }
  }, {
    key: 'clear',
    value: function clear() {
      this.storage.set(this.name, {});
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.storage.remove(this.name);
    }
  }]);

  return Store;
}();

exports.default = Store;