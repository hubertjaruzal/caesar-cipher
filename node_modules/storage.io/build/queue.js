'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _util = require('./util');

var _storage = require('./storage');

var _storage2 = _interopRequireDefault(_storage);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Queue = function () {
  function Queue() {
    var opts = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

    _classCallCheck(this, Queue);

    this.name = (opts.name || (0, _util.random)()) + '-queue';
    this.limit = opts.limit;
    this.type = opts.type === 'session' ? 'session' : 'local';
    this.storage = new _storage2.default(this.type);

    var queue = this.storage.get(this.name);
    if (!Array.isArray(queue)) {
      console.warn('reset storage key: %s', this.name);
      this.storage.set(this.name, []);
    }
  }

  _createClass(Queue, [{
    key: 'push',
    value: function push(value) {
      var q = this.storage.get(this.name);
      var len = q.push(value);

      if (this.limit && len > this.limit) {
        q.shift();
      }

      this.storage.set(this.name, q);

      return len;
    }
  }, {
    key: 'shift',
    value: function shift() {
      var q = this.storage.get(this.name);
      var v = q.shift();

      this.storage.set(this.name, q);

      return v;
    }
  }, {
    key: 'pop',
    value: function pop() {
      var q = this.storage.get(this.name);
      var v = q.pop();

      this.storage.set(this.name, q);

      return v;
    }
  }, {
    key: 'size',
    value: function size() {
      return this.storage.get(this.name).length;
    }
  }, {
    key: 'clear',
    value: function clear() {
      this.storage.set(this.name, []);
    }
  }, {
    key: 'all',
    value: function all() {
      return this.storage.get(this.name);
    }
  }, {
    key: 'destroy',
    value: function destroy() {
      this.storage.remove(this.name);
    }
  }]);

  return Queue;
}();

/**
 * export
 */

exports.default = Queue;