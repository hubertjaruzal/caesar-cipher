'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _util = require('./util');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var stringify = JSON.stringify;
var expireSuffix = '__expire';
var typeSuffix = '__type';

var parse = JSON.parse;

var Storage = function () {
  function Storage(type) {
    _classCallCheck(this, Storage);

    var storage = (0, _util.getStorage)(type);

    this.type = type;
    this.setItem = storage.setItem.bind(storage);
    this.getItem = storage.getItem.bind(storage);
    this.removeItem = storage.removeItem.bind(storage);
  }

  _createClass(Storage, [{
    key: 'set',
    value: function set(key, value, expire) {
      var type = getType(value);
      expire = (0, _util.getExpire)(expire);

      if (type === 'object') {
        this.setItem(key, stringify(value));
      } else {
        this.setItem(key, value);
      }

      this.setItem(key + typeSuffix, type);
      if (expire) {
        this.setItem(key + expireSuffix, expire);
      }
    }
  }, {
    key: 'get',
    value: function get(key) {
      var expire = this.getItem(key + expireSuffix);
      var type = this.getItem(key + typeSuffix);

      var value = this.getItem(key);

      if (expire && parseInt(expire) < Date.now()) {
        // clear item
        this.remove(key);
        return;
      }

      if (!type || !value) {
        return;
      }

      if (type === 'int') {
        return parseInt(value);
      }

      if (type === 'float') {
        return parseFloat(value);
      }

      if (type === 'undefined') {
        return;
      }

      if (type === 'object') {
        return parse(value);
      }

      return value;
    }
  }, {
    key: 'remove',
    value: function remove(key) {
      this.removeItem(key);
      this.removeItem(key + typeSuffix);
      this.removeItem(key + expireSuffix);
    }
  }, {
    key: 'clear',
    value: function clear() {
      return (0, _util.getStorage)(this.type).clear();
    }
  }]);

  return Storage;
}();

function getType(value) {
  if ((0, _util.isInt)(value)) {
    return 'int';
  }

  if ((0, _util.isFloat)(value)) {
    return 'float';
  }

  return typeof value === 'undefined' ? 'undefined' : _typeof(value);
}

/**
 * export
 */

exports.default = Storage;